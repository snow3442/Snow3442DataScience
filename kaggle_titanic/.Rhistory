titanic_train<-read.csv(file.choose(),head=T)
titanic_test<-read.csv(file.choose(),head=T)
library(tree)
library(gbm)
library(randomForest)
library(ggplot2)
library(MASS)
library(boot)
dim(titanic_train)
dim(titanic_test)
head(titanic_train,n=5)
test(titanic_test, n=5)
head(titanic_test, n=5)
attach(titanic_train)
sum(is.na(titanic_train))
titanic_train$Ticket<-NULL
sum(is.na(titanic_train$Survived))
summary(is.na(titanic_train))
histogram(Age)
titanic_train<-na.omit(titanic_train)
titanic_train<-within(titanic_train,{
Survived<-as.factor(Survived)
Pclass<-as.factor(Pclass)
Parch<-as.factor(Parch)
})
dim(titanic_train)
titanic_train<-read.csv(file.choose(),head=T)
titanic_test<-read.csv(file.choose(),head=T)
View(titanic_test)
View(titanic_train)
attach(titanic_train)
titanic_train$Ticket<-NULL
titanic_train$PassengerId<-NULL
titanic_train$Name<-NULL
titanic_train$Embarked<-NULL
titanic_train$Cabin<-NULL
sum(is.na(titanic_train))
titanic_train<-na.omit(titanic_train)
titanic_train<-within(titanic_train,{
Survived<-as.factor(Survived)
Pclass<-as.factor(Pclass)
Parch<-as.factor(Parch)
})
dim(titanic_train)
correct_list<-rep(0,10)
for (i in 1:10) {
set.seed(i)
train=sample(1: nrow(titanic_train), 500)
titanic.train<-titanic_train[train,]
titanic.test<-titanic_train[-train,]
#logistic regression
logit.fit<-glm(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,
data=titanic.train,family=binomial)
summary(logit.fit)
pred.probs.logit<-predict(logit.fit,titanic.test,type="response")
pred.surv.logit<-rep(0,214)
pred.surv.logit[pred.probs.logit>0.5]=1
table(pred.surv.logit,titanic.test$Survived)
correct_list[i]<-mean(pred.surv.logit==titanic.test$Survived)
}
mean(correct_list)
correct_list<-rep(0,10)
for (i in 1:10) {
set.seed(i)
train=sample(1: nrow(titanic_train), 500)
titanic.train<-titanic_train[train,]
titanic.test<-titanic_train[-train,]
#logistic regression
logit.fit<-glm(Survived~Pclass+Sex+Age+SibSp+Fare,
data=titanic.train,family=binomial)
summary(logit.fit)
pred.probs.logit<-predict(logit.fit,titanic.test,type="response")
pred.surv.logit<-rep(0,214)
pred.surv.logit[pred.probs.logit>0.5]=1
table(pred.surv.logit,titanic.test$Survived)
correct_list[i]<-mean(pred.surv.logit==titanic.test$Survived)
}
mean(correct_list)
correct_list
#7 fold cross validation
set.seed(1)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(titanic_train)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_logit<-titanic_train[-test_i,]
test_logit<-titanic_train[test_i,]
logit.fit<-glm(Survived~Pclass+Sex+Age+SibSp+Fare, data=train_logit,family=binomial)
pred.probs<-predict(logit.fit,test_logit,type="response")
pred.surv<-rep(0,nrow(test_logit))
pred.surv[pred.probs>0.5]=1
cv_list[k]=mean(pred.surv==test_logit$Survived)
}
cv_list
mean(cv_list)
set.seed(2)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(titanic_train)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_lda<-titanic_train[-test_i,]
test_lda<-titanic_train[test_i,]
lda.fit=lda(Survived~Pclass+Sex+Age+SibSp+Fare+Embarked,data=titanic_train,subset=train_i)
lda.pred<-predict(lda.fit,test_lda)
lda.class<-lda.pred$class
cv_list[k]=mean(lda.class==test_lda$Survived)
}
cv_list
mean(cv_list)
#Linear Discriminant Analysis
set.seed(2)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(titanic_train)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_lda<-titanic_train[-test_i,]
test_lda<-titanic_train[test_i,]
lda.fit=lda(Survived~Pclass+Sex+Age+SibSp+Fare,data=titanic_train,subset=train_i)
lda.pred<-predict(lda.fit,test_lda)
lda.class<-lda.pred$class
cv_list[k]=mean(lda.class==test_lda$Survived)
}
cv_list
mean(cv_list)
library(adabag)
library(ada)
library(rpart)
lean_data<-titanic_train
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
ada.titanic<- ada(Survived~., data=lean_data, test.x = lean_data.test[,-1], test.y = lean_data.test$Survived, type = "gentle", iter = 70)
summary(ada.titanic)
names(ada.titanic)
ada.titanic$confusion
(20+54)/714
accuracy.titanic_ada<-(ada.titanic$confusion[1,1]+ada.titanic$confusion[2,2])/714
accuracy.titanic_ada
set.seed(3)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_ada<-titanic_train[-test_i,]
test_ada<-titanic_train[test_i,]
ada.titanic<- ada(Survived~., data=train_ada, test.x = test_ada[,-1], test.y = test_ada$Survived, type = "gentle", iter = 500)
cv_list[k]=(ada.titanic$confusion[1,1]+ada.titanic$confusion[2,2])/102
}
cv_list
mean(cv_list)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
ada.titanic<- ada(Survived~., data=lean_data, type = "gentle", iter = 50)
ada.pred<-predict(ada.titanic, data=lean_data.test)
ada.pred
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
ada.titanic<- ada(Survived~., data=lean_data, type = "gentle", iter = 50)
ada.pred<-predict(ada.titanic,newdata=lean_data.test)
ada.pred.mean=mean(ada.pred==test_ada$Survived)
ada.pred.mean
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
ada.titanic<- ada(Survived~., data=lean_data, type = "gentle", iter = 50)
ada.pred<-predict(ada.titanic,newdata=lean_data.test)
ada.pred.mean=mean(ada.pred==lean_data.test$Survived)
ada.pred.mean
glm.fit<-glm(data=lean_data,Survived~.,family="binomial")
pred.probs<-predict(glm.fit, newdata = lean_data, type="response")
pred.0.1<-rep(0,714)
pred.0.1[pred.probs>0.5]<-1
mean(pred.0.1==lean_data$Survived)
ggplot(titanic_train, aes(x=Sex, y=Age)) +
facet_wrap(~Pclass)+
geom_boxplot()
##### 7 fold cross validation for adaboost #####
set.seed(3)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_ada<-lean_data[-test_i,]
test_ada<-lean_data[test_i,]
ada.titanic<- ada(Survived~., data=train_ada, type = "gentle", iter = 100)
ada.pred<-predict(ada.titanic,newdata=test_ada)
cv_list[k]=mean(ada.pred==test_ada$Survived)
}
cv_list
mean(cv_list)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_train, mtry=2, ntree=100, importance=TRUE)
summary(rf.fit)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_train, mtry=2, ntree=100, importance=TRUE)
pred.probs<-predict(rf.fit,lean_data.test,type="response")
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
result=mean(pred.surv==lean_data.test$Survived)
result
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
pred.probs<-predict(rf.fit,lean_data.test,type="response")
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
result=mean(pred.surv==lean_data.test$Survived)
result
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
pred.probs<-predict(rf.fit,lean_data.test,type="response")
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
pred.surv
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
yhat.rf = predict(rf.fit ,newdata=lean_data.test)
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
pred.surv
result=mean(pred.surv==lean_data.test$Survived)
result
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
pred.surv = predict(rf.fit ,newdata=lean_data.test)
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
pred.surv
result=mean(pred.surv==lean_data.test$Survived)
result
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~. data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~., data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
set.seed(5)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
rf.fit=randomForest(Survived~., data=lean_data,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
rf.fit=randomForest(Survived~., data=titanic_train,subset=lean_data.train, mtry=2, ntree=100, importance=TRUE)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
ada.titanic<- ada(Survived~., data=lean_data.train, type = "gentle", iter = 50)
ada.pred<-predict(ada.titanic,newdata=lean_data.test)
ada.pred.mean=mean(ada.pred==lean_data.test$Survived)
ada.pred.mean
rf.fit=randomForest(Survived~., data=titanic_train,subset=lean_train, mtry=2, importance=TRUE)
pred.surv = predict(rf.fit ,newdata=lean_data.test)
pred.surv
pred.surv<-rep(0,nrow(lean_data.test))
pred.surv[pred.probs>0.5]=1
pred.surv
result=mean(pred.surv==lean_data.test$Survived)
result
pred.surv = predict(rf.fit, newdata=titanic_train[-lean_train,])
pred.surv
rf.yhat = predict(rf.fit, newdata=titanic_train[-lean_train,])
rf.yhat
result=mean(yhat==lean_data.test$Survived)
result=mean(rf.yhat==lean_data.test$Survived)
result
#### 7 fold cross validation using random forest####
set.seed(6)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_rf<-lean_data[-test_i,]
test_rf<-lean_data[test_i,]
rf.fit=randomForest(Survived~., data=titanic_train,subset=train_rf, mtry=2, importance=TRUE)
rf.yhat = predict(rf.fit, newdata=test_rf)
cv_list[k]=mean(rf.yhat==test_rf$Survived)
}
cv_list
mean(cv_list)
#### 7 fold cross validation using random forest####
set.seed(6)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_rf<-lean_data[-test_i,]
test_rf<-lean_data[test_i,]
rf.fit=randomForest(Survived~., data=titanic_train,subset=train_rf, mtry=2, importance=TRUE)
rf.yhat = predict(rf.fit, newdata=titanic_train[-train_i,])
cv_list[k]=mean(rf.yhat==test_rf$Survived)
}
cv_list
mean(cv_list)
set.seed(6)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
set.seed(6)
n_folds=7
folds_i<-sample(rep(1:7,length.out=nrow(lean_data)))
cv_list<-rep(0,7)
for (k in 1:7) {
test_i<-which(folds_i==k)
train_i<-which(folds_i!=k)
train_rf<-lean_data[-test_i,]
test_rf<-lean_data[test_i,]
rf.fit=randomForest(Survived~., data=titanic_train,subset=train_i, mtry=2, importance=TRUE)
rf.yhat = predict(rf.fit, newdata=test_rf)
cv_list[k]=mean(rf.yhat==test_rf$Survived)
}
cv_list
mean(cv_list)
library(e1071)
install.packages(e1071)
install.packages("e1071", repos="http://R-Forge.R-project.org")
library(e1071)
set.seed(7)
lean_train<-sample(1: nrow(lean_data), 500)
lean_data.train<-lean_data[lean_train,]
lean_data.test<-lean_data[-lean_train,]
svmfit = svm(Survived~., data=lean_data.train, kernel="linear", cost=10, scale=FALSE)
plot(svmfit,lean_data.train)
set.seed(77)
tune.out=tune(svm, Survived~., data=lean_data.train, kernel="linear",
ranges = list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out)
bestmod = tune.out$best.model
svmYPreds = predict(bestmod, lean_data.test)
table(predict=svmYPreds,truth=lean_data.test$Survived)
svmResult = (104+69)/214
svmResult
ggplot(titanic_train, aes(x= Pclass, fill= Survived)) + geom_bar()
#stacked barchart of survived by socio class and by sex
ggplot(titanic_train,title="Survived by socio class",
aes(x= Pclass, fill= Survived)) + geom_bar()
ggplot(titanic_train, ggtitle("Survived by socio class"),
aes(x= Pclass, fill= Survived)) + geom_bar()
survBySocioClassPlot<-ggplot(titanic_train,
aes(x= Pclass, fill= Survived)) + geom_bar()
print(survBySocioClassPlot+ggtitle("Survival Status By Socio Class"))
#stacked barchart of survived by socio class and by sex
qplot(Pclass, data=titanic_train, geom="bar", fill=Survived) +
facet_wrap(~Sex)
#stacked barchart of survived by socio class and by sex
qplot(Pclass, main="Survival Status by gender and social class", data=titanic_train, geom="bar", fill=Survived) +
facet_wrap(~Sex)
survBySocioClassPlot<-ggplot(titanic_train,
aes(x= Pclass, fill= Survived)) + geom_bar()
print(survBySocioClassPlot+ggtitle("Survival Status By Socio Class"))
View(lean_data)
ggplot(joints, aes(x= Pclass, y= Age, colour= Survived)) + geom_boxplot() + facet_wrap(~ Sex, nrow= 1)
ggplot(Sex, aes(x= Pclass, y= Age, colour= Survived)) + geom_boxplot() + facet_wrap(~ overlap, nrow= 1)
# Num x Cat x Cat x Cat
ggplot(Pclass, aes(x= Sex, y= Age, colour= Survived)) + geom_boxplot() + facet_wrap(~ overlap, nrow= 1)
ggplot(Pclass, aes(x= Parch, y= Age, colour= Survived)) + geom_boxplot() + facet_wrap(~ overlap, nrow= 1)
ggplot(titanic_train, aes(x= Sex, y= Age, colour= Pclass)) + geom_boxplot() + facet_wrap(~ Survived, nrow= 1)
# Num x Cat x Cat x Cat
ggplot(titanic_train, aes(x= Survived, y= Age, colour= Pclass)) + geom_boxplot() + facet_wrap(~ Sex, nrow= 1)
# Num x Cat x Cat
ggplot(titanic_train, aes(x= Survived, y=Age, colour= Pclass)) + geom_boxplot()
# Num x Cat x Cat
ggplot(titanic_train, aes(x= Pclass, y=Age, colour= Survived)) + geom_boxplot()
histogram(Age)
histogram(Survived)
survivalRate = mean(Survived==1)
survivalRate
#gender distribution
histogram(Sex)
ggplot(titanic_train, aes(x= Survived, y= Age)) + geom_boxplot()
dim(titanic_train)
titanic_train<-read.csv(file.choose(),head=T)
titanic_test<-read.csv(file.choose(),head=T)
attach(titanic_train)
titanic_train$Ticket<-NULL
titanic_train$PassengerId<-NULL
titanic_train$Name<-NULL
titanic_train$Embarked<-NULL
titanic_train$Cabin<-NULL
sum(is.na(titanic_train))
sum(is.na(titanic_train$Age))
sum(is.na(titanic_train$Age))
titanic_train<-na.omit(titanic_train)
titanic_train<-within(titanic_train,{
Survived<-as.factor(Survived)
Pclass<-as.factor(Pclass)
Parch<-as.factor(Parch)
})
dim(titanic_train)
survivalRate = mean(Survived==1)
survivalRate
#age distribution
histogram(Age)
hist(Age)
#gender distribution
hist(Sex)
#Survived by socio class
survBySocioClassPlot<-ggplot(titanic_train,
aes(x= Pclass, fill= Survived)) + geom_bar()
print(survBySocioClassPlot+ggtitle("Survival Status By Socio Class"))
#survived by age
ggplot(titanic_train, aes(x= Survived, y= Age)) + geom_boxplot()
#####stacked barchart of survived by socio class and by sex
qplot(Pclass, main="Survival Status by gender and social class", data=titanic_train, geom="bar", fill=Survived) +
facet_wrap(~Sex)
##### boxplots of age by social class and Survival status
ggplot(titanic_train, aes(x= Pclass, y=Age, colour= Survived)) + geom_boxplot()
library(ggplot2)
survBySocioClassPlot<-ggplot(titanic_train,
aes(x= Pclass, fill= Survived)) + geom_bar()
print(survBySocioClassPlot+ggtitle("Survival Status By Socio Class"))
ggplot(titanic_train, aes(x= Survived, y= Age)) + geom_boxplot()
